"use client";

import { Container, Title } from "@/shared/components/widgets";
import {
  CheckoutAddressForm,
  CheckoutCart,
  CheckoutPersonalForm,
} from "@/shared/components/widgets/checkout";
import { CheckoutSidebar } from "@/shared/components/widgets/checkout-sidebar";

import { useCart } from "@/shared/hooks/use-cart";
import { useState } from "react";
import { FormProvider, useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import {
  checkoutFormSchema,
  CheckoutFormValues,
} from "@/shared/constants/checkout-form-schema";
import { createOrder } from "@/app/actions";
import toast from "react-hot-toast";
import { useRouter } from "next/navigation";

// TODO –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥—ã, –î–æ–±–∞–≤–∏—Ç—å —Ä–∞–∑–Ω—ã–µ –Ω–∞–ª–æ–≥–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≥–æ—Ä–æ–¥–∞
// TODO –ú–æ–∂–Ω–æ –µ—â—ë —Ä–∞–±–æ—Ç—É —Å —Ñ–æ—Ä–º–æ–π –ø–µ—Ä–µ–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—É–∫ (–Ω–æ —Ö–∑)
export default function CheckoutPage() {
  const router = useRouter();
  const { totalAmount, updateItemQuantity, items, removeCartItem, loading } =
    useCart();

  const [submitting, setSubmitting] = useState(false);

  const form = useForm<CheckoutFormValues>({
    resolver: zodResolver(checkoutFormSchema),
    // TODO –≤—ã–≤–µ—Å—Ç–∏ default value –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç (–≤ –∫–æ–Ω—Ç–∞–Ω—Ç—ã), –∏ —á—Ç–æ–±—ã –æ–Ω —Ç–∏–ø–∏–∑–∏—Ä–æ–≤–∞–ª—Å—è –æ—Ç CheckoutFormValues
    defaultValues: {
      email: "",
      firstName: "",
      lastName: "",
      phone: "",
      address: "",
      comment: "",
    },
  });

  // React.useEffect(() => {
  //   async function fetchUserInfo() {
  //     const data = await Api.auth.getMe();
  //     const [firstName, lastName] = data.fullName.split(" ");

  //     form.setValue("firstName", firstName);
  //     form.setValue("lastName", lastName);
  //     form.setValue("email", data.email);
  //   }

  //   if (session) {
  //     fetchUserInfo();
  //   }
  // }, [session]);

  const onSubmit = async (data: CheckoutFormValues) => {
    try {
      console.log(data);
      setSubmitting(true);
      // –¢—Ä–∏–≥–≥–µ—Ä–∏–º —Å–µ—Ä–≤–µ—Ä–Ω—ã–π —ç–∫—à–µ–Ω
      const url = await createOrder(data);
      toast.error("–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ –æ—Ñ–æ—Ä–º–ª–µ–Ω! üìù –ü–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –æ–ø–ª–∞—Ç—É... ", {
        icon: "‚úÖ",
      });
      if (url) {
        const timeout = setTimeout(() => {
          router.push("/");
        }, 2000);
      }
    } catch (err) {
      console.log(err);
      setSubmitting(false);
      toast.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑", {
        icon: "‚ùå",
      });
    }
  };

  // TODO –í—ã–Ω–µ—Å—Ç–∏ –≤ useCart (–ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –≤ –¥–≤—É—Ö –º–µ—Å—Ç–∞—Ö)
  const onClickCountButton = (
    id: number,
    quantity: number,
    type: "plus" | "minus"
  ) => {
    const newQuantity = type === "plus" ? quantity + 1 : quantity - 1;
    updateItemQuantity(id, newQuantity);
  };

  return (
    <Container className="mt-10">
      <Title
        text="–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞"
        className="font-extrabold mb-8 text-[36px]"
      />

      <FormProvider {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)}>
          <div className="flex gap-10">
            {/* –õ–µ–≤–∞—è —á–∞—Å—Ç—å */}
            <div className="flex flex-col gap-10 flex-1 mb-20">
              <CheckoutCart
                onClickCountButton={onClickCountButton}
                removeCartItem={removeCartItem}
                items={items}
                loading={loading}
              />
              <CheckoutPersonalForm
                className={loading ? "opacity-40 pointer-events-none" : ""}
              />
              <CheckoutAddressForm
                className={loading ? "opacity-40 pointer-events-none" : ""}
              />
            </div>

            {/* –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å */}
            <div className="w-[450px]">
              <CheckoutSidebar
                totalAmount={totalAmount}
                // TODO –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å –∑–∞—é–∑–∞—Ç—å isSubmiting –∏–∑ r-h-f
                loading={loading || submitting}
              />
            </div>
          </div>
        </form>
      </FormProvider>
    </Container>
  );
}
